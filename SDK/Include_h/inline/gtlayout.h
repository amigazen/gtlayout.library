#ifndef INLINE_GTLAYOUT_H
#define INLINE_GTLAYOUT_H

/*
** GCC format inline files.
**
** Copyright 1993-1999 by Olaf 'Olsen' Barthel
** Changes in 47.2 by Costel 'Cyborg' Mincea
** This library is freely distributable.
** This is the first complete stand-alone release of the "gtlayout.library" user
** interface creation and management tool kit.
** I'm grateful for any enhancement requests, bug reports and especially bug
** fixes. Contact: olsen@sourcery.han.de
**
** Generated by LibDescConverter from an sfd file
*/

/* "gtlayout.library" */
/*--- functions in V80 or higher --- */
#define LT_LevelWidth(handle, levelFormat, dispFunc, min, max, maxWidth, maxLen, fullCheck)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register STRPTR p1 __asm("a1") = (levelFormat);   \
	register APTR p2 __asm("a2") = (dispFunc);   \
	register LONG p3 __asm("d0") = (min);   \
	register LONG p4 __asm("d1") = (max);   \
	register LONG *p5 __asm("a3") = (maxWidth);   \
	register LONG *p6 __asm("a5") = (maxLen);   \
	register LONG p7 __asm("d2") = (fullCheck);   \
	__asm volatile ("jsr a6@(-30:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3), "r"(p4), "r"(p5), "r"(p6), "r"(p7) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define LT_DeleteHandle(handle)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	__asm volatile ("jsr a6@(-36:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define LT_CreateHandle(screen, font)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct Screen *p0 __asm("a0") = (screen);   \
	register struct TextAttr *p1 __asm("a1") = (font);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-42:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define LT_CreateHandleTagList(screen, tagList)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct Screen *p0 __asm("a0") = (screen);   \
	register struct TagItem *p1 __asm("a1") = (tagList);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-48:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#ifndef NO_INLINE_STDARG
#define LT_CreateHandleTags(screen, tags...)    \
({  \
	ULONG _tags[] = {tags};   \
	LT_CreateHandleTagList((screen), _tags);   \
	r;   \
})
#endif

#define LT_Rebuild(handle, bounds, extraWidth, extraHeight, clear)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register struct IBox *p1 __asm("a1") = (bounds);   \
	register LONG p2 __asm("a2") = (extraWidth);   \
	register LONG p3 __asm("d0") = (extraHeight);   \
	register LONG p4 __asm("d1") = (clear);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-54:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3), "r"(p4) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define LT_HandleInput(handle, msgQualifier, msgClass, msgCode, msgGadget)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register ULONG p1 __asm("d0") = (msgQualifier);   \
	register ULONG *p2 __asm("a1") = (msgClass);   \
	register UWORD *p3 __asm("a2") = (msgCode);   \
	register struct Gadget **p4 __asm("a3") = (msgGadget);   \
	__asm volatile ("jsr a6@(-60:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3), "r"(p4) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define LT_BeginRefresh(handle)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	__asm volatile ("jsr a6@(-66:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define LT_EndRefresh(handle, complete)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register LONG p1 __asm("d0") = (complete);   \
	__asm volatile ("jsr a6@(-72:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define LT_GetAttributesA(handle, id, tagList)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register LONG p1 __asm("d0") = (id);   \
	register struct TagItem *p2 __asm("a1") = (tagList);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-78:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#ifndef NO_INLINE_STDARG
#define LT_GetAttributes(handle, id, tags...)    \
({  \
	ULONG _tags[] = {tags};   \
	LT_GetAttributesA((handle), (id), _tags);   \
	r;   \
})
#endif

#define LT_SetAttributesA(handle, id, tagList)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register LONG p1 __asm("d0") = (id);   \
	register struct TagItem *p2 __asm("a1") = (tagList);   \
	__asm volatile ("jsr a6@(-84:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#ifndef NO_INLINE_STDARG
#define LT_SetAttributes(handle, id, tags...)    \
({  \
	ULONG _tags[] = {tags};   \
	LT_SetAttributesA((handle), (id), _tags);   \
})
#endif

#define LT_AddA(handle, type, label, id, tagList)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register LONG p1 __asm("d0") = (type);   \
	register STRPTR p2 __asm("d1") = (label);   \
	register LONG p3 __asm("d2") = (id);   \
	register struct TagItem *p4 __asm("a1") = (tagList);   \
	__asm volatile ("jsr a6@(-90:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3), "r"(p4) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#ifndef NO_INLINE_STDARG
#define LT_Add(handle, type, label, id, tags...)    \
({  \
	ULONG _tags[] = {tags};   \
	LT_AddA((handle), (type), (label), (id), _tags);   \
})
#endif

#define LT_NewA(handle, tagList)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register struct TagItem *p1 __asm("a1") = (tagList);   \
	__asm volatile ("jsr a6@(-96:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#ifndef NO_INLINE_STDARG
#define LT_New(handle, tags...)    \
({  \
	ULONG _tags[] = {tags};   \
	LT_NewA((handle), _tags);   \
})
#endif

#define LT_EndGroup(handle)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	__asm volatile ("jsr a6@(-102:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define LT_LayoutA(handle, title, bounds, extraWidth, extraHeight, idcmp, align, tagParams)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register STRPTR p1 __asm("a1") = (title);   \
	register struct IBox *p2 __asm("a2") = (bounds);   \
	register LONG p3 __asm("d0") = (extraWidth);   \
	register LONG p4 __asm("d1") = (extraHeight);   \
	register ULONG p5 __asm("d2") = (idcmp);   \
	register LONG p6 __asm("d3") = (align);   \
	register struct TagItem *p7 __asm("a3") = (tagParams);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-108:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3), "r"(p4), "r"(p5), "r"(p6), "r"(p7) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#ifndef NO_INLINE_STDARG
#define LT_Layout(handle, title, bounds, extraWidth, extraHeight, idcmp, align, tags...)    \
({  \
	ULONG _tags[] = {tags};   \
	LT_LayoutA((handle), (title), (bounds), (extraWidth), (extraHeight), (idcmp), (align), _tags);   \
	r;   \
})
#endif

#define LT_LayoutMenusA(handle, menuTemplate, tagParams)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register struct NewMenu *p1 __asm("a1") = (menuTemplate);   \
	register struct TagItem *p2 __asm("a2") = (tagParams);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-114:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#ifndef NO_INLINE_STDARG
#define LT_LayoutMenus(handle, menuTemplate, tags...)    \
({  \
	ULONG _tags[] = {tags};   \
	LT_LayoutMenusA((handle), (menuTemplate), _tags);   \
	r;   \
})
#endif

#define LT_LabelWidth(handle, label)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register STRPTR p1 __asm("a1") = (label);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-138:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define LT_LabelChars(handle, label)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register STRPTR p1 __asm("a1") = (label);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-144:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define LT_LockWindow(window)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct Window *p0 __asm("a0") = (window);   \
	__asm volatile ("jsr a6@(-150:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define LT_UnlockWindow(window)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct Window *p0 __asm("a0") = (window);   \
	__asm volatile ("jsr a6@(-156:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define LT_DeleteWindowLock(window)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct Window *p0 __asm("a0") = (window);   \
	__asm volatile ("jsr a6@(-162:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define LT_ShowWindow(handle, activate)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register LONG p1 __asm("a1") = (activate);   \
	__asm volatile ("jsr a6@(-168:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define LT_Activate(handle, id)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register LONG p1 __asm("d0") = (id);   \
	__asm volatile ("jsr a6@(-174:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define LT_PressButton(handle, id)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register LONG p1 __asm("d0") = (id);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-180:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define LT_GetCode(msgQualifier, msgClass, msgCode, msgGadget)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register ULONG p0 __asm("d0") = (msgQualifier);   \
	register ULONG p1 __asm("d1") = (msgClass);   \
	register ULONG p2 __asm("d2") = (msgCode);   \
	register struct Gadget *p3 __asm("a0") = (msgGadget);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-186:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

/*--- functions in V878 or higher --- */
#define LT_GetIMsg(handle)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-192:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define LT_ReplyIMsg(msg)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct IntuiMessage *p0 __asm("a0") = (msg);   \
	__asm volatile ("jsr a6@(-198:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

/*--- functions in V280 or higher --- */
#define LT_BuildA(handle, tagParams)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register struct TagItem *p1 __asm("a1") = (tagParams);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-204:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#ifndef NO_INLINE_STDARG
#define LT_Build(handle, tags...)    \
({  \
	ULONG _tags[] = {tags};   \
	LT_BuildA((handle), _tags);   \
	r;   \
})
#endif

#define LT_RebuildTagList(handle, clear, tags)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register LONG p1 __asm("d0") = (clear);   \
	register struct TagItem *p2 __asm("a1") = (tags);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-210:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#ifndef NO_INLINE_STDARG
#define LT_RebuildTags(handle, clear, tags...)    \
({  \
	ULONG _tags[] = {tags};   \
	LT_RebuildTagList((handle), (clear), _tags);   \
	r;   \
})
#endif

/*--- functions in V880 or higher --- */
#define LT_UpdateStrings(handle)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	__asm volatile ("jsr a6@(-216:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

/*--- functions in V1080 or higher --- */
#define LT_DisposeMenu(menu)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct Menu *p0 __asm("a0") = (menu);   \
	__asm volatile ("jsr a6@(-222:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#define LT_NewMenuTemplate(screen, textAttr, amigaGlyph, checkGlyph, error, menuTemplate)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct Screen *p0 __asm("a0") = (screen);   \
	register struct TextAttr *p1 __asm("a1") = (textAttr);   \
	register struct Image *p2 __asm("a2") = (amigaGlyph);   \
	register struct Image *p3 __asm("a3") = (checkGlyph);   \
	register LONG *p4 __asm("d0") = (error);   \
	register struct NewMenu *p5 __asm("d1") = (menuTemplate);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-228:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3), "r"(p4), "r"(p5) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define LT_NewMenuTagList(tagList)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct TagItem *p0 __asm("a0") = (tagList);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-234:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#ifndef NO_INLINE_STDARG
#define LT_NewMenuTags(tags...)    \
({  \
	ULONG _tags[] = {tags};   \
	LT_NewMenuTagList(_tags);   \
	r;   \
})
#endif

#define LT_MenuControlTagList(window, intuitionMenu, tags)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct Window *p0 __asm("a0") = (window);   \
	register struct Menu *p1 __asm("a1") = (intuitionMenu);   \
	register struct TagItem *p2 __asm("a2") = (tags);   \
	__asm volatile ("jsr a6@(-240:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

#ifndef NO_INLINE_STDARG
#define LT_MenuControlTags(window, intuitionMenu, tags...)    \
({  \
	ULONG _tags[] = {tags};   \
	LT_MenuControlTagList((window), (intuitionMenu), _tags);   \
})
#endif

#define LT_GetMenuItem(menu, id)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct Menu *p0 __asm("a0") = (menu);   \
	register ULONG p1 __asm("d0") = (id);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-246:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define LT_FindMenuCommand(menu, msgCode, msgQualifier, msgGadget)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct Menu *p0 __asm("a0") = (menu);   \
	register ULONG p1 __asm("d0") = (msgCode);   \
	register ULONG p2 __asm("d1") = (msgQualifier);   \
	register struct Gadget *p3 __asm("a1") = (msgGadget);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-252:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

/*--- functions in V1380 or higher --- */
#define LT_NewLevelWidth(handle, levelFormat, dispFunc, min, max, maxWidth, maxLen, fullCheck)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register STRPTR p1 __asm("a1") = (levelFormat);   \
	register APTR p2 __asm("a2") = (dispFunc);   \
	register LONG p3 __asm("d0") = (min);   \
	register LONG p4 __asm("d1") = (max);   \
	register LONG *p5 __asm("a3") = (maxWidth);   \
	register LONG *p6 __asm("d3") = (maxLen);   \
	register LONG p7 __asm("d2") = (fullCheck);   \
	__asm volatile ("jsr a6@(-258:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3), "r"(p4), "r"(p5), "r"(p6), "r"(p7) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

/*--- functions in V3080 or higher --- */
#define LT_Refresh(handle)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	__asm volatile ("jsr a6@(-264:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

/*--- functions in V3380 or higher --- */
#define LT_CatchUpRefresh(handle)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	__asm volatile ("jsr a6@(-270:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})

/*--- functions in V3880 or higher --- */
#define LT_GetWindowUserData(window, defaultValue)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct Window *p0 __asm("a0") = (window);   \
	register APTR p1 __asm("a1") = (defaultValue);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-276:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

/*--- functions in V4680 or higher --- */
#define LT_Redraw(handle, id)    \
({  \
	register void *b __asm("a6") = GTLayoutBase;  \
	register struct LayoutHandle *p0 __asm("a0") = (handle);   \
	register LONG p1 __asm("d0") = (id);   \
	__asm volatile ("jsr a6@(-282:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
})


#endif /* INLINE_GTLAYOUT_H */
